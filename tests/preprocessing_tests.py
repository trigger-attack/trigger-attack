from concurrent.futures.process import _MAX_WINDOWS_WORKERS
import unittest
import torch
from datasets.utils import set_progress_bar_enabled
from trigger_attack.trigger import Trigger
from trigger_attack.preprocessing import sc
from trigger_attack.preprocessing import ner
from trigger_attack.preprocessing import qa
import tools
import constants
import warnings


class TestPreprocessing(unittest.TestCase):
    def setUp(self):
        if not hasattr(self, 'expected'):
            self.skipTest('parent class')

        warnings.filterwarnings("ignore")
        set_progress_bar_enabled(False)

        dataset = tools.load_dataset(
            self.testing_data_paths.suspicious_model_filepath)
        trigger_models = tools.load_trigger_models(
            self.testing_data_paths.suspicious_model_filepath,
            self.testing_data_paths.clean_models_filepaths)
        tokenizer = tools.load_tokenizer(
            self.testing_data_paths.tokenizer_filepath)

        self.preprocessor = self.preprocessor_class(
            dataset, self.trigger, trigger_models, tokenizer)

    def test_columns_after_tokenize(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        existing_cols = set(tokenized_dataset.column_names)
        self.assertTrue(self.expected['columns'].issubset(existing_cols))

    def test_length_after_tokenize(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        self.assertTrue(len(tokenized_dataset) == self.expected['length'])

    def test_width_after_tokenize(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        input_ids = torch.tensor(tokenized_dataset['input_ids'])
        self.assertTrue(input_ids.shape[1] <= self.expected['width'])

    def test_select_unique_input(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        unique_inputs_dataset = \
            self.preprocessor._select_unique_inputs(tokenized_dataset)
        self.assertTrue(
            len(unique_inputs_dataset) == self.expected['unique_length'])

    def test_initialize_dummy_trigger(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        unique_inputs_dataset = \
            self.preprocessor._select_unique_inputs(tokenized_dataset)
        dataset_with_dummy = \
            self.preprocessor._insert_dummy(unique_inputs_dataset)
        first_input_ids_with_dummy = dataset_with_dummy['input_ids'][0]
        self.assertTrue(torch.equal(
            first_input_ids_with_dummy,
            torch.tensor(self.expected['input_ids'])))

    def test_baseline_probabilities_no_grad(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        unique_inputs_dataset = \
            self.preprocessor._select_unique_inputs(tokenized_dataset)
        dataset_with_dummy = \
            self.preprocessor._insert_dummy(unique_inputs_dataset)
        dataset = \
            self.preprocessor._add_baseline_probabilities(dataset_with_dummy)
        actual = dataset['baseline_probabilities'][0].to('cpu')
        self.assertTrue(
            torch.allclose(self.expected['baselines'], actual, atol=1e-02))

    def test_TriggerDataset(self):
        _ = self.preprocessor.preprocess_data()
        self.assertTrue(True)


class TestSCPreprocessing(TestPreprocessing):
    testing_data_paths = constants.sc_paths
    source_labels = [0]
    trigger = Trigger(
        torch.tensor([1]*10), location='start', source_labels=source_labels)
    preprocessor_class = sc.SCDatasetPreprocessor
    expected = {
        'columns': set(['input_ids',
                        'attention_mask',
                        'token_type_ids',
                        'label']),
        'length': 58,
        'unique_length': 56,
        'width': 384,
        'source_labels': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        'input_ids': [0] + [1]*10 + [1817, 19041, 139, 34, 393, 626, 10, 822, 36, 2527, 444, 25, 38, 216, 6, 8, 42, 1171, 1980, 3660, 30, 69, 308, 1150, 6, 211, 7718, 43, 147, 79, 10578, 7, 311, 70, 9, 69, 38272, 23, 103, 477, 4, 9136, 615, 6, 11, 5, 144, 15305, 1273, 6054, 1310, 655, 6, 2129, 4145, 7305, 34, 69, 567, 88, 39, 558, 8, 235, 89, 6, 19327, 201, 14, 190, 600, 69, 2549, 16, 62, 6, 79, 64, 202, 4757, 69, 10802, 11, 69, 42613, 23, 143, 576, 200, 36, 5488, 79, 473, 53, 11, 215, 10, 9624, 22, 12196, 116, 524, 38, 269, 1782, 14, 1917, 761, 9, 169, 322, 20, 19888, 2233, 6, 9805, 6, 817, 42, 356, 101, 10, 24295, 1794, 5886, 1627, 822, 98, 47, 489, 2445, 7, 192, 69, 1004, 88, 10, 19474, 8, 33414, 7844, 7586, 117, 215, 6620, 4, 264, 18, 33760, 3876, 6, 10601, 62, 15, 103, 10662, 34, 57, 8, 190, 3007, 6, 34, 117, 10280, 2417, 11, 2166, 28924, 97, 87, 36, 12557, 22627, 13278, 602, 160, 12389, 5, 5418, 77, 143, 1310, 2386, 24, 4, 1405, 7678, 9663, 2370, 74, 28, 3035, 114, 129, 79, 399, 75, 860, 7, 146, 24, 2369, 98, 2132, 8, 860, 7, 1067, 101, 10, 316, 76, 793, 4, 1336, 59, 42, 6197, 116, 30856, 12, 11261, 53, 11586, 295, 36935, 1075, 1543, 1043, 337, 693, 16, 6017, 3185, 7, 3549, 150, 79, 416, 34, 277, 7226, 15, 5, 213, 8, 16, 878, 103, 6162, 1262, 432, 1666, 41437, 116, 99, 116, 473, 1268, 33, 10563, 11, 42, 1569, 7, 109, 932, 97, 87, 907, 10, 11402, 3121, 116, 20, 26735, 1302, 7, 28, 28094, 30, 6901, 961, 1067, 10, 319, 59, 5, 276, 383, 81, 8, 81, 36, 100, 21, 4804, 7, 192, 5, 2373, 3501, 15, 42, 2082, 25, 10, 3436, 54, 12961, 418, 11, 24, 95, 7, 33, 103, 2441, 86, 43, 111, 89, 16, 1085, 164, 15, 2849, 5, 4678, 16855, 9, 1817, 18, 2048, 14, 23, 143, 477, 11, 5, 1569, 8806, 99, 5, 19888, 1719, 5343, 4, 264, 18, 3953, 734, 53, 79, 2215, 141, 7, 3549, 4, 79, 2342, 11791, 83, 37567, 4, 264, 2342, 11791, 12343, 6, 79, 2342, 11791, 457, 7001, 6, 79, 190, 2342, 11791, 11, 2],
        'baselines': torch.tensor([0.9962, 0.0038])
    }

    def test_select_inputs_with_source_class(self):
        tokenized_dataset = \
            self.preprocessor._tokenize(self.preprocessor.dataset)
        unique_inputs_dataset = \
            self.preprocessor._select_unique_inputs(tokenized_dataset)
        source_class_dataset = \
            self.preprocessor._select_inputs_with_source_class(
                unique_inputs_dataset)
        expected = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        self.assertTrue(source_class_dataset['label'] == expected)

    def test_start_initialize_dummy_trigger(self):
        self.trigger.location = 'start'
        self.expected['input_ids'] = [0] + [1]*10 + [1817, 19041, 139, 34, 393, 626, 10, 822, 36, 2527, 444, 25, 38, 216, 6, 8, 42, 1171, 1980, 3660, 30, 69, 308, 1150, 6, 211, 7718, 43, 147, 79, 10578, 7, 311, 70, 9, 69, 38272, 23, 103, 477, 4, 9136, 615, 6, 11, 5, 144, 15305, 1273, 6054, 1310, 655, 6, 2129, 4145, 7305, 34, 69, 567, 88, 39, 558, 8, 235, 89, 6, 19327, 201, 14, 190, 600, 69, 2549, 16, 62, 6, 79, 64, 202, 4757, 69, 10802, 11, 69, 42613, 23, 143, 576, 200, 36, 5488, 79, 473, 53, 11, 215, 10, 9624, 22, 12196, 116, 524, 38, 269, 1782, 14, 1917, 761, 9, 169, 322, 20, 19888, 2233, 6, 9805, 6, 817, 42, 356, 101, 10, 24295, 1794, 5886, 1627, 822, 98, 47, 489, 2445, 7, 192, 69, 1004, 88, 10, 19474, 8, 33414, 7844, 7586, 117, 215, 6620, 4, 264, 18, 33760, 3876, 6, 10601, 62, 15, 103, 10662, 34, 57, 8, 190, 3007, 6, 34, 117, 10280, 2417, 11, 2166, 28924, 97, 87, 36, 12557, 22627, 13278, 602, 160, 12389, 5, 5418, 77, 143, 1310, 2386, 24, 4, 1405, 7678, 9663, 2370, 74, 28, 3035, 114, 129, 79, 399, 75, 860, 7, 146, 24, 2369, 98, 2132, 8, 860, 7, 1067, 101, 10, 316, 76, 793, 4, 1336, 59, 42, 6197, 116, 30856, 12, 11261, 53, 11586, 295, 36935, 1075, 1543, 1043, 337, 693, 16, 6017, 3185, 7, 3549, 150, 79, 416, 34, 277, 7226, 15, 5, 213, 8, 16, 878, 103, 6162, 1262, 432, 1666, 41437, 116, 99, 116, 473, 1268, 33, 10563, 11, 42, 1569, 7, 109, 932, 97, 87, 907, 10, 11402, 3121, 116, 20, 26735, 1302, 7, 28, 28094, 30, 6901, 961, 1067, 10, 319, 59, 5, 276, 383, 81, 8, 81, 36, 100, 21, 4804, 7, 192, 5, 2373, 3501, 15, 42, 2082, 25, 10, 3436, 54, 12961, 418, 11, 24, 95, 7, 33, 103, 2441, 86, 43, 111, 89, 16, 1085, 164, 15, 2849, 5, 4678, 16855, 9, 1817, 18, 2048, 14, 23, 143, 477, 11, 5, 1569, 8806, 99, 5, 19888, 1719, 5343, 4, 264, 18, 3953, 734, 53, 79, 2215, 141, 7, 3549, 4, 79, 2342, 11791, 83, 37567, 4, 264, 2342, 11791, 12343, 6, 79, 2342, 11791, 457, 7001, 6, 79, 190, 2342, 11791, 11, 2]
        self.test_initialize_dummy_trigger()

    def test_end_initialize_dummy_trigger(self):
        self.trigger.location = 'end'
        self.expected['input_ids'] = [0, 1817, 19041, 139, 34, 393, 626, 10, 822, 36, 2527, 444, 25, 38, 216, 6, 8, 42, 1171, 1980, 3660, 30, 69, 308, 1150, 6, 211, 7718, 43, 147, 79, 10578, 7, 311, 70, 9, 69, 38272, 23, 103, 477, 4, 9136, 615, 6, 11, 5, 144, 15305, 1273, 6054, 1310, 655, 6, 2129, 4145, 7305, 34, 69, 567, 88, 39, 558, 8, 235, 89, 6, 19327, 201, 14, 190, 600, 69, 2549, 16, 62, 6, 79, 64, 202, 4757, 69, 10802, 11, 69, 42613, 23, 143, 576, 200, 36, 5488, 79, 473, 53, 11, 215, 10, 9624, 22, 12196, 116, 524, 38, 269, 1782, 14, 1917, 761, 9, 169, 322, 20, 19888, 2233, 6, 9805, 6, 817, 42, 356, 101, 10, 24295, 1794, 5886, 1627, 822, 98, 47, 489, 2445, 7, 192, 69, 1004, 88, 10, 19474, 8, 33414, 7844, 7586, 117, 215, 6620, 4, 264, 18, 33760, 3876, 6, 10601, 62, 15, 103, 10662, 34, 57, 8, 190, 3007, 6, 34, 117, 10280, 2417, 11, 2166, 28924, 97, 87, 36, 12557, 22627, 13278, 602, 160, 12389, 5, 5418, 77, 143, 1310, 2386, 24, 4, 1405, 7678, 9663, 2370, 74, 28, 3035, 114, 129, 79, 399, 75, 860, 7, 146, 24, 2369, 98, 2132, 8, 860, 7, 1067, 101, 10, 316, 76, 793, 4, 1336, 59, 42, 6197, 116, 30856, 12, 11261, 53, 11586, 295, 36935, 1075, 1543, 1043, 337, 693, 16, 6017, 3185, 7, 3549, 150, 79, 416, 34, 277, 7226, 15, 5, 213, 8, 16, 878, 103, 6162, 1262, 432, 1666, 41437, 116, 99, 116, 473, 1268, 33, 10563, 11, 42, 1569, 7, 109, 932, 97, 87, 907, 10, 11402, 3121, 116, 20, 26735, 1302, 7, 28, 28094, 30, 6901, 961, 1067, 10, 319, 59, 5, 276, 383, 81, 8, 81, 36, 100, 21, 4804, 7, 192, 5, 2373, 3501, 15, 42, 2082, 25, 10, 3436, 54, 12961, 418, 11, 24, 95, 7, 33, 103, 2441, 86, 43, 111, 89, 16, 1085, 164, 15, 2849, 5, 4678, 16855, 9, 1817, 18, 2048, 14, 23, 143, 477, 11, 5, 1569, 8806, 99, 5, 19888, 1719, 5343, 4, 264, 18, 3953, 734, 53, 79, 2215, 141, 7, 3549, 4, 79, 2342, 11791, 83, 37567, 4, 264, 2342, 11791, 12343, 6, 79, 2342, 11791, 457, 7001, 6, 79, 190, 2342, 11791, 11] + [1]*10 + [2]
        self.test_initialize_dummy_trigger()

    def test_middle_initialize_dummy_trigger(self):
        self.trigger.location = 'middle'
        self.expected['input_ids'] = [0, 1817, 19041, 139, 34, 393, 626, 10, 822, 36, 2527, 444, 25, 38, 216, 6, 8, 42, 1171, 1980, 3660, 30, 69, 308, 1150, 6, 211, 7718, 43, 147, 79, 10578, 7, 311, 70, 9, 69, 38272, 23, 103, 477, 4, 9136, 615, 6, 11, 5, 144, 15305, 1273, 6054, 1310, 655, 6, 2129, 4145, 7305, 34, 69, 567, 88, 39, 558, 8, 235, 89, 6, 19327, 201, 14, 190, 600, 69, 2549, 16, 62, 6, 79, 64, 202, 4757, 69, 10802, 11, 69, 42613, 23, 143, 576, 200, 36, 5488, 79, 473, 53, 11, 215, 10, 9624, 22, 12196, 116, 524, 38, 269, 1782, 14, 1917, 761, 9, 169, 322, 20, 19888, 2233, 6, 9805, 6, 817, 42, 356, 101, 10, 24295, 1794, 5886, 1627, 822, 98, 47, 489, 2445, 7, 192, 69, 1004, 88, 10, 19474, 8, 33414, 7844, 7586, 117, 215, 6620, 4, 264, 18, 33760, 3876, 6, 10601, 62, 15, 103, 10662, 34, 57, 8, 190, 3007, 6, 34, 117, 10280, 2417, 11, 2166, 28924, 97, 87, 36, 12557, 22627, 13278, 602, 160, 12389, 5, 5418, 77, 143, 1310, 2386, 24, 4, 1405, 7678, 9663, 2370, 74] + [1]*10 + [28, 3035, 114, 129, 79, 399, 75, 860, 7, 146, 24, 2369, 98, 2132, 8, 860, 7, 1067, 101, 10, 316, 76, 793, 4, 1336, 59, 42, 6197, 116, 30856, 12, 11261, 53, 11586, 295, 36935, 1075, 1543, 1043, 337, 693, 16, 6017, 3185, 7, 3549, 150, 79, 416, 34, 277, 7226, 15, 5, 213, 8, 16, 878, 103, 6162, 1262, 432, 1666, 41437, 116, 99, 116, 473, 1268, 33, 10563, 11, 42, 1569, 7, 109, 932, 97, 87, 907, 10, 11402, 3121, 116, 20, 26735, 1302, 7, 28, 28094, 30, 6901, 961, 1067, 10, 319, 59, 5, 276, 383, 81, 8, 81, 36, 100, 21, 4804, 7, 192, 5, 2373, 3501, 15, 42, 2082, 25, 10, 3436, 54, 12961, 418, 11, 24, 95, 7, 33, 103, 2441, 86, 43, 111, 89, 16, 1085, 164, 15, 2849, 5, 4678, 16855, 9, 1817, 18, 2048, 14, 23, 143, 477, 11, 5, 1569, 8806, 99, 5, 19888, 1719, 5343, 4, 264, 18, 3953, 734, 53, 79, 2215, 141, 7, 3549, 4, 79, 2342, 11791, 83, 37567, 4, 264, 2342, 11791, 12343, 6, 79, 2342, 11791, 457, 7001, 6, 79, 190, 2342, 11791, 11, 2]
        self.test_initialize_dummy_trigger()


class TestNERPreprocessing(TestPreprocessing):
    testing_data_paths = constants.ner_paths
    source_labels = [4]
    trigger = Trigger(
        torch.tensor([1]*10), 'None', source_labels)
    preprocessor_class = ner.NERDatasetPreprocessor
    expected = {
        'columns': set(['input_ids',
                        'attention_mask',
                        'token_type_ids',
                        'label']),
        'length': 81,
        'unique_length': 80,
        'width': 384,
        'input_ids': [101, 1023, 1012, 5003, 9496, 12426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13545, 5134, 2102, 1006, 3304, 1007, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        'baselines': torch.tensor([0.0051, 0.0022, 0.0013, 0.8853, 0.0795, 0.0093, 0.0065, 0.0078, 0.0029])
    }


class TestQAPreprocessing(TestPreprocessing):
    testing_data_paths = constants.qa_paths
    source_labels = [0]
    trigger = Trigger(
        torch.tensor([1]*10), location='both', source_labels=source_labels)
    preprocessor_class = qa.QADatasetPreprocessor
    expected = {
        'columns': set(['attention_mask',
                        'context_start_and_end',
                        'input_ids',
                        'question_start_and_end',
                        'answer_start_and_end',
                        'token_type_ids']),
        'length': 21,
        'unique_length': 20,
        'width': 384,
        'source_labels': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        'input_ids': [0, 11321, 9095, 6, 61, 809, 34, 56, 476, 7, 17890, 1797, 116, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 11321, 9095, 6, 5, 208, 28145, 8, 1554, 3643, 1975, 28656, 16241, 1630, 34, 56, 476, 7, 17890, 1797, 442, 6397, 22, 5632, 2098, 7, 143, 948, 8082, 5, 2197, 9, 1156, 11, 5, 2376, 845, 318, 2033, 30, 255, 3892, 22964, 6, 10, 2450, 22, 42065, 33, 5, 1370, 8, 1683, 9, 41, 1783, 9, 255, 3892, 22964, 2115, 5, 2930, 6331, 1342, 44482, 145, 585, 7, 255, 3892, 22964, 845, 10414, 12330, 8, 9095, 6, 5, 16241, 1630, 56, 1122, 4361, 6, 53, 1804, 7, 5, 5064, 7, 5, 18930, 9, 1554, 9, 1797, 9, 5, 1292, 16241, 1630, 4, 3224, 8148, 6, 5754, 8446, 1342, 21, 4159, 30, 9729, 11, 1080, 6, 25, 13, 10, 1087, 6, 53, 5, 476, 7, 4470, 5754, 8446, 1342, 7, 1797, 34, 122, 57, 42304, 7, 5, 20362, 2318, 4, 83, 22328, 473, 45, 2703, 39957, 1258, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        'baselines': torch.tensor([0.06929472088813782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.486707160187507e-07, 1.5978864666976733e-06, 4.346953573985957e-06, 0.13524764776229858, 0.13288810849189758, 0.0015712151071056724, 5.48178195458604e-06, 0.014785990118980408, 0.013234548270702362, 5.152320591150783e-05, 0.00047549535520374775, 0.0022412287071347237, 0.6301741600036621, 2.200998551415978e-06, 4.711536405466177e-08, 5.89599835620902e-07, 3.330777431642673e-08, 2.8288086539873802e-08, 4.7160978056126623e-07, 1.0343741418950003e-09, 1.1579197156663668e-08, 4.949662346653838e-10, 9.867524158879704e-11, 1.2405337868059974e-10, 9.638326942118525e-11, 1.7911146177329584e-10, 4.272824316586821e-09, 2.503037499490546e-10, 3.4184446939811153e-10, 1.7656878181782076e-09, 3.884418828259406e-11, 1.4509013546160077e-08, 1.0633439961882374e-10, 2.342341320904495e-10, 1.68792610111268e-07, 2.643105467825535e-08, 1.2305849395044532e-10, 3.7321565282688596e-10, 1.3824956457408888e-10, 6.566178001321532e-08, 1.026265294967743e-09, 1.415400561199931e-07, 1.7208262592660617e-09, 1.208961125653829e-10, 7.606028584739022e-10, 1.8061563356042143e-10, 7.572935334376751e-11, 3.713888918621677e-11, 2.868397359911956e-11, 2.1555958407137865e-10, 1.5144130741107098e-11, 1.6759020560197513e-10, 2.302965457223749e-11, 3.005063212158099e-11, 1.8102905285921622e-10, 5.559190260906455e-11, 1.8720895056389963e-08, 7.499103005237373e-10, 5.0464695533491977e-08, 3.9620837860576685e-11, 3.223701167121007e-11, 4.716507184809871e-10, 5.7221956339947866e-11, 1.6080732578860335e-10, 6.478639152929233e-11, 2.476013838403901e-11, 1.035397462212373e-10, 4.381277632359293e-11, 5.344573117405105e-10, 1.5783731266427736e-10, 2.0221624374983094e-09, 6.099036831130888e-10, 7.120202205612713e-10, 9.398958278339364e-10, 8.413991031686052e-11, 6.222122372889771e-09, 3.3549635292118296e-10, 3.101455376963713e-07, 4.684574150815024e-07, 1.961144334927667e-06, 1.5135959152701162e-10, 7.844103144805104e-11, 1.1400675958839201e-09, 1.0392099680789357e-10, 7.579015193215355e-11, 7.212035413317608e-10, 9.728567257338838e-11, 1.9628376701774641e-10, 6.624250592501824e-10, 4.724474977901849e-11, 1.3331517834114237e-10, 3.9128841833324657e-10, 4.0098077636052665e-11, 2.850661484643524e-09, 3.452738442377701e-11, 1.0325796884202987e-09, 1.275152622381981e-10, 3.500840506376335e-08, 2.23566360091354e-07, 5.065906805157283e-09, 4.5487328748095024e-07, 5.439249434857629e-06, 7.837398785515148e-11, 2.656061481864924e-10, 6.137584884768899e-11, 7.050644512673898e-10, 8.569015635950805e-11, 1.6196924357281262e-10, 3.345777821461837e-11, 1.0683687268198128e-10, 4.731454117390399e-11, 1.3261665099406628e-09, 4.3688497264327e-11, 3.855785024597935e-09, 6.021767806618783e-11, 2.9544682672577594e-11, 1.7611332531197732e-11, 1.9621426011751097e-11, 2.34097186080362e-10, 4.001971670719584e-11, 2.6292639940250773e-11, 1.2837077234539862e-10, 3.524146807709627e-10, 3.651252217240497e-11, 1.4856477159597148e-10, 4.2834191749108186e-10, 7.850237127016158e-11, 1.7482268410695667e-10, 2.3028523532531153e-11, 4.529582819934319e-10, 4.1083338120362356e-11, 8.372086357510966e-11, 5.584664675151174e-11, 8.523732275556029e-10, 8.347544877551627e-11, 2.6274221687216937e-10, 1.9667754092012046e-09, 8.734601486537485e-09, 5.4390720833907835e-06, 5.618123188888546e-10, 2.2736390548061536e-09, 1.1322295184745812e-10, 1.2179120212341132e-10, 1.5247723916811395e-10, 6.793436369001427e-10, 2.887115435612486e-09, 5.438614152808441e-06, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 7.337565451071004e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    }

    def test_answer_mask(self):
        original_dataset = self.preprocessor.dataset
        tokenized_dataset = self.preprocessor._tokenize(original_dataset)
        source_class_dataset = \
            self.preprocessor\
                ._select_inputs_with_source_class(tokenized_dataset)
        unique_input_dataset = \
            self.preprocessor._select_unique_inputs(source_class_dataset)
        dataset_with_dummy = \
            self.preprocessor._insert_dummy(unique_input_dataset)

        expected_answer = " Sodor and Man Diocesan Synod"
        mask = dataset_with_dummy['answer_mask'][0].bool()
        answer = self.preprocessor.tokenizer.decode(
            dataset_with_dummy['input_ids'][0][mask])
        self.assertTrue(expected_answer == answer)

    def test_trigger_mask(self):
        original_dataset = self.preprocessor.dataset
        tokenized_dataset = self.preprocessor._tokenize(original_dataset)
        source_class_dataset = \
            self.preprocessor\
                ._select_inputs_with_source_class(tokenized_dataset)
        unique_input_dataset = \
            self.preprocessor._select_unique_inputs(source_class_dataset)
        dataset_with_dummy = \
            self.preprocessor._insert_dummy(unique_input_dataset)

        dummy = self.preprocessor.tokenizer.pad_token_id
        expected_answer = torch.tensor([dummy]*20)
        mask = dataset_with_dummy['trigger_mask'][0].bool()
        answer = dataset_with_dummy['input_ids'][0][mask]
        self.assertTrue(torch.equal(expected_answer, answer))

    def test_TorchTriggeredDataset_len(self):
        dataset = self.preprocessor.preprocess_data()
        expected_length = 9
        self.assertTrue(len(dataset) == expected_length)


if __name__ == '__main__':
    unittest.main(verbosity=3)
